Poodah - Java MapReduce Framework
***WARNING: our poodah takes up alot of afs disk space. Your program
will crash if you don't have enough space***

The poodah framework is very easy to startup and run with the WordCount and Wordlength examples provided. Follow these steps:

1. Go to {root}/lib/ServerConfig.xml. It should look like this:

<ServerConfig>
  <data num_participants="9"></data>
  <data num_maps_host="2"></data>
  <data num_reduce_host="2"></data>
  <data root_dir="/afs/andrew.cmu.edu/usr19/rajagarw/public/p3/lib"></data>
  <data master_server="ghc16.ghc.andrew.cmu.edu"></data>
  <data userid="rajagarw"></data>
</ServerConfig>

The num_participants is the number of workers you want. 
The num_maps_host and num_reduces/host are jobs you want to run on each worker.
The root_dir is the full path of the framework lib files. THIS MUST BE ALTERED for proper usage.
The master_server is the server that you want the master to run on. We only using GHC cluster machines.
Finally, the userid parameter is the andrew-id of the user that starts the framework.

2. Modify the WordCount.java and WordLength.java located in ../poodah/src/poodah/samples/ to set up the desired job configuration. 
You have to modify the input and output files as well as the master-server address. We provided two sample input files located at ../fileTests/

3. Now it is time to build the project. Go into ../buildPoodah/ and run: 

		./BUILDPOODAH.py

This should output all the jar files into the ../lib directory.
Note: as long as the current directory structure is maintained, the build files don't need to be modified.

4. Start up the process manager (which starts the framework) by going into the lib directory and running:

		java -jar ProcMan.jar {FullPath}/ServerConfig.xml

5. In the shell prompt generated by the Process Manager, type 'help' to see available commands. 
****WARNING: monitor [jobid] takes a longer time to return a value  when the job is in the shuffle step. Be patient if it hangs!****

-----

6. If you want to kill a worker for fault-tolerant testing, go into the ../lib directory, and type:

		./killworker.py <Full Path>/ServerConfig.xml <hostname of worker>

Thanks
-Raj, Kirk
